{"version":3,"sources":["components/AddItemForm.tsx","components/EditableSpan.tsx","components/MapComponent.tsx","Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","addTask","newTitle","trim","callBack","TextField","id","label","variant","size","style","marginBottom","value","onChange","e","currentTarget","onKeyPress","key","IconButton","color","onClick","AddBox","EditableSpan","setNewTitle","edit","setEdit","EditTrueHandler","onBlur","autoFocus","type","onDoubleClick","MapComponent","tasksForTodolist","todolistID","removeTask","map","t","className","isDone","Checkbox","defaultChecked","changeTaskStatus","checked","editTaskHandler","aria-label","Delete","maxWidth","maxHeight","minWidth","minHeight","Todolist","changeFilter","setTodolists","todolists","el","filter","tasks","editTodolist","Button","marginLeft","removeTodolist","taskID","editTask","App","todolistID1","v1","todolistID2","setTasks","newTask","changeStatus","taskId","AppBar","position","Toolbar","edge","Menu","Typography","Container","fixed","Grid","container","padding","newID","spacing","item","Paper","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.6ac4966e.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Button, IconButton, TextField} from \"@mui/material\";\r\nimport {AddBox} from \"@mui/icons-material\";\r\n\r\n\r\ntype AddItemFormPropsType = {\r\n    callBack: (title: string) => void\r\n}\r\n\r\nconst AddItemForm = (props: AddItemFormPropsType) => {\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<boolean>(false)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const addTask = () => {\r\n        let newTitle = title.trim()\r\n        if (newTitle !== \"\") {\r\n            props.callBack(newTitle);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(true);\r\n        }\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(false);\r\n        if (e.key === \"Enter\") {\r\n            addTask();\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            {/*<input value={title}*/}\r\n            {/*       onChange={onChangeHandler}*/}\r\n            {/*       onKeyPress={onKeyPressHandler}*/}\r\n            {/*       className={error ? \"error\" : \"\"}*/}\r\n            {/*/>*/}\r\n            <TextField id=\"outlined-basic\" label=\"Title is required\" variant=\"outlined\" size='small'\r\n                       style={{marginBottom: '10px'}}\r\n                       value={title}\r\n                       onChange={onChangeHandler}\r\n                       onKeyPress={onKeyPressHandler}\r\n                       error={error}\r\n            />\r\n            {/*<button onClick={addTask}>+</button>*/}\r\n            {/*<Button*/}\r\n            {/*    variant=\"contained\"*/}\r\n            {/*    style={{maxWidth: '25px', maxHeight: '34px', minWidth: '25px', minHeight: '34px', margin: '3px 8px'}}*/}\r\n            {/*    onClick={addTask}>+</Button>*/}\r\n            <IconButton\r\n                color='primary'\r\n                onClick={addTask}>\r\n                <AddBox/>\r\n            </IconButton>\r\n            {/*{error && <div className=\"error-message\">\"Title is required\"</div>}*/}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AddItemForm;","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {TextField} from \"@mui/material\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    callBack: (newTitle: string) => void\r\n}\r\n\r\nconst EditableSpan = (props: EditableSpanPropsType) => {\r\n    let [newTitle, setNewTitle] = useState(props.title)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const addTask = () => {\r\n        props.callBack(newTitle);\r\n    }\r\n\r\n    const [edit, setEdit] = useState(false)\r\n    const EditTrueHandler = () => {\r\n        setEdit(!edit)\r\n        addTask()\r\n    }\r\n    return (\r\n        edit\r\n            ?\r\n            <TextField\r\n                id=\"outlined-basic\"\r\n                variant=\"outlined\"\r\n                onBlur={EditTrueHandler}\r\n                onChange={onChangeHandler}\r\n                autoFocus\r\n                type=\"text\"\r\n                value={newTitle}\r\n                size='small'\r\n            />\r\n            // <input\r\n            //     onBlur={EditTrueHandler} onChange={onChangeHandler} autoFocus type=\"text\" value={newTitle}/>\r\n            : <span onDoubleClick={EditTrueHandler}>{props.title}</span>\r\n    );\r\n};\r\n\r\nexport default EditableSpan;","import React, {ChangeEvent} from 'react';\r\nimport {TaskType} from \"../Todolist\"\r\nimport EditableSpan from \"./EditableSpan\";\r\nimport {Checkbox, IconButton} from \"@mui/material\";\r\nimport {Delete} from \"@mui/icons-material\";\r\n\r\n\r\ntype PropsType = {\r\n    tasksForTodolist: TaskType[]\r\n    todolistID: string\r\n    removeTask: (todolistID: string, taskId: string) => void\r\n    changeTaskStatus: (todolistID: string, taskId: string, isDone: boolean) => void\r\n    editTaskHandler: (taskID: string, newTitle: string) => void\r\n}\r\n\r\n\r\nexport const MapComponent = ({tasksForTodolist, todolistID, removeTask, ...props}: PropsType) => {\r\n    return (\r\n        <div>\r\n            <div>\r\n                {\r\n                    tasksForTodolist.map(t => {\r\n                        const onClickHandler = () => removeTask(todolistID, t.id)\r\n                        const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                            props.changeTaskStatus(todolistID, t.id, e.currentTarget.checked);\r\n                        }\r\n\r\n                        return <div key={t.id} className={t.isDone ? \"is-done\" : \"\"}>\r\n                            <Checkbox defaultChecked\r\n                                      onChange={onChangeHandler}\r\n                                      checked={t.isDone}\r\n                            />\r\n                            {/*<input type=\"checkbox\"*/}\r\n                            {/*       onChange={onChangeHandler}*/}\r\n                            {/*       checked={t.isDone}*/}\r\n                            {/*/>*/}\r\n                            <EditableSpan title={t.title}\r\n                                          callBack={(newTitle) => props.editTaskHandler(t.id, newTitle)}/>\r\n                            <IconButton aria-label=\"delete\">\r\n                                <Delete\r\n                                    style={{maxWidth: '18px', maxHeight: '23px', minWidth: '18px', minHeight: '23px'}}\r\n                                    onClick={onClickHandler}/>\r\n                            </IconButton>\r\n                            {/*<button onClick={onClickHandler}>x</button>*/}\r\n                        </div>\r\n                    })\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {FilterValuesType, TodolistsType} from './App';\r\nimport AddItemForm from \"./components/AddItemForm\";\r\nimport {MapComponent} from \"./components/MapComponent\";\r\nimport EditableSpan from \"./components/EditableSpan\";\r\nimport {Button} from \"@mui/material\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\nexport type PropsType = {\r\n    title: string\r\n    todolistID: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (todolistID: string, taskId: string) => void\r\n    //changeFilter: (todolistID: string, value: FilterValuesType) => void\r\n    addTask: (todolistID: string, title: string) => void\r\n    changeTaskStatus: (todolistID: string, taskId: string, isDone: boolean) => void\r\n    filter: FilterValuesType\r\n    setTodolists: (todolists: Array<TodolistsType>) => void\r\n    todolists: Array<TodolistsType>\r\n    removeTodolist: (todolistID: string) => void\r\n    editTodolist: (todolistID: string, newTitle: string) => void\r\n    editTask: (todolistID: string, taskID: string, newTitle: string) => void\r\n}\r\n\r\nexport function Todolist(props: PropsType) {\r\n\r\n    function changeFilter(todolistID: string, value: FilterValuesType) {\r\n        props.setTodolists(props.todolists.map(el => el.id === todolistID ? {...el, filter: value} : el))\r\n    }\r\n\r\n    let tasksForTodolist = props.tasks;\r\n    if (props.filter === \"active\") {\r\n        tasksForTodolist = props.tasks.filter(t => t.isDone === false);\r\n    }\r\n    if (props.filter === \"completed\") {\r\n        tasksForTodolist = props.tasks.filter(t => t.isDone === true);\r\n    }\r\n\r\n    const onAllClickHandler = () => changeFilter(props.todolistID, \"all\");\r\n    const onActiveClickHandler = () => changeFilter(props.todolistID, \"active\");\r\n    const onCompletedClickHandler = () => changeFilter(props.todolistID, \"completed\");\r\n\r\n    const removeTodolistHandler = () => {\r\n        props.removeTodolist(props.todolistID)\r\n    }\r\n\r\n    const addTaskHandler = (title: string) => {\r\n        props.addTask(props.todolistID, title)\r\n    }\r\n\r\n    const editTodolistHandler = (newTitle: string) => {\r\n        props.editTodolist(props.todolistID, newTitle)\r\n    }\r\n    const editTaskHandler = (taskID: string, newTitle: string) => {\r\n        props.editTask(props.todolistID, taskID, newTitle)\r\n    }\r\n\r\n    return <div>\r\n        <h3>\r\n            {/*{props.title}*/}\r\n            <EditableSpan title={props.title} callBack={editTodolistHandler}/>\r\n            <Button\r\n                variant=\"outlined\" color=\"error\"\r\n                style={{maxWidth: '15px', maxHeight: '21px', minWidth: '15px', minHeight: '21px', marginLeft: '8px'}}\r\n                onClick={removeTodolistHandler}>x</Button>\r\n            {/*<button onClick={removeTodolistHandler}>X</button>*/}\r\n        </h3>\r\n        <AddItemForm callBack={addTaskHandler}/>\r\n        <MapComponent\r\n            tasksForTodolist={tasksForTodolist}\r\n            removeTask={props.removeTask}\r\n            changeTaskStatus={props.changeTaskStatus}\r\n            todolistID={props.todolistID}\r\n            editTaskHandler={editTaskHandler}\r\n        />\r\n        <div>\r\n            <Button variant={props.filter === 'all' ? \"outlined\" : \"contained\"} color=\"success\"\r\n                    onClick={onAllClickHandler}>All</Button>\r\n            <Button variant={props.filter === 'active' ? \"outlined\" : \"contained\"} color=\"error\"\r\n                    onClick={onActiveClickHandler}>Active</Button>\r\n            <Button variant={props.filter === 'completed' ? \"outlined\" : \"contained\"} color=\"secondary\"\r\n                    onClick={onCompletedClickHandler}>Completed</Button>\r\n            {/*<button className={props.filter === 'all' ? \"active-filter\" : \"\"}*/}\r\n            {/*        onClick={onAllClickHandler}>All*/}\r\n            {/*</button>*/}\r\n            {/*<button className={props.filter === 'active' ? \"active-filter\" : \"\"}*/}\r\n            {/*        onClick={onActiveClickHandler}>Active*/}\r\n            {/*</button>*/}\r\n            {/*<button className={props.filter === 'completed' ? \"active-filter\" : \"\"}*/}\r\n            {/*        onClick={onCompletedClickHandler}>Completed*/}\r\n            {/*</button>*/}\r\n        </div>\r\n    </div>\r\n}\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {Todolist} from './Todolist';\r\nimport {v1} from 'uuid';\r\nimport AddItemForm from \"./components/AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@mui/material\";\r\nimport {Menu} from \"@mui/icons-material\";\r\n\r\nexport type TodolistsType = {\r\n    id: string,\r\n    title: string,\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\n\r\nfunction App() {\r\n\r\n    let todolistID1 = v1();\r\n    let todolistID2 = v1();\r\n\r\n    let [todolists, setTodolists] = useState<Array<TodolistsType>>([\r\n        {id: todolistID1, title: 'What to learn', filter: 'all'},\r\n        {id: todolistID2, title: 'What to buy', filter: 'all'},\r\n    ])\r\n\r\n    let [tasks, setTasks] = useState({\r\n        [todolistID1]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true},\r\n            {id: v1(), title: \"ReactJS\", isDone: false},\r\n            {id: v1(), title: \"Rest API\", isDone: false},\r\n            {id: v1(), title: \"GraphQL\", isDone: false},\r\n        ],\r\n        [todolistID2]: [\r\n            {id: v1(), title: \"HTML&CSS2\", isDone: true},\r\n            {id: v1(), title: \"JS2\", isDone: true},\r\n            {id: v1(), title: \"ReactJS2\", isDone: false},\r\n            {id: v1(), title: \"Rest API2\", isDone: false},\r\n            {id: v1(), title: \"GraphQL2\", isDone: false},\r\n        ]\r\n    });\r\n    const editTodolist = (todolistID: string, newTitle: string) => {\r\n        setTodolists(todolists.map(el => el.id === todolistID ? {...el, title: newTitle} : el))\r\n    }\r\n\r\n    const editTask = (todolistID: string, taskID: string, newTitle: string) => {\r\n        setTasks({\r\n            ...tasks,\r\n            [todolistID]: tasks[todolistID].map(el => el.id === taskID ? {...el, title: newTitle} : el)\r\n        })\r\n    }\r\n\r\n    function removeTask(todolistID: string, id: string) {\r\n        setTasks({...tasks, [todolistID]: tasks[todolistID].filter(el => el.id !== id)})\r\n    }\r\n\r\n    function addTask(todolistID: string, title: string) {\r\n        let newTask = {id: v1(), title: title, isDone: false};\r\n        setTasks({...tasks, [todolistID]: [newTask, ...tasks[todolistID]]})\r\n    }\r\n\r\n    function changeStatus(todolistID: string, taskId: string, isDone: boolean) {\r\n        setTasks({...tasks, [todolistID]: tasks[todolistID].map(el => el.id === taskId ? {...el, isDone} : el)});\r\n    }\r\n\r\n    const removeTodolist = (todolistID: string) => {\r\n        setTodolists(todolists.filter(el => el.id !== todolistID))\r\n    }\r\n\r\n    const addTodolist = (newTitle: string) => {\r\n        const newID = v1()\r\n        let newTodolist: TodolistsType = {id: newID, title: newTitle, filter: 'all'};\r\n        setTodolists([newTodolist, ...todolists])\r\n        setTasks({...tasks, [newID]: []})\r\n\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        Todolist\r\n                    </Typography>\r\n                    <Button color='inherit'>Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: '20px'}}>\r\n                    <AddItemForm callBack={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todolists.map((el) => {\r\n                            return (\r\n                                <Grid item>\r\n                                    <Paper style={{padding: '10px'}}>\r\n                                <Todolist\r\n                                    key={el.id}\r\n                                    todolistID={el.id}\r\n                                    title={el.title}\r\n                                    tasks={tasks[el.id]}\r\n                                    removeTask={removeTask}\r\n                                    //changeFilter={changeFilter}\r\n                                    addTask={addTask}\r\n                                    changeTaskStatus={changeStatus}\r\n                                    filter={el.filter}\r\n                                    setTodolists={setTodolists}\r\n                                    todolists={todolists}\r\n                                    removeTodolist={removeTodolist}\r\n                                    editTodolist={editTodolist}\r\n                                    editTask={editTask}\r\n                                />\r\n                                </Paper>\r\n                                </Grid>\r\n                            )\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}