{"version":3,"sources":["components/AddItemForm.tsx","components/EditableSpan.tsx","components/MapComponent.tsx","Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","addTask","newTitle","trim","callBack","value","onChange","e","currentTarget","onKeyPress","key","className","onClick","EditableSpan","setNewTitle","edit","setEdit","EditTrueHandler","onBlur","autoFocus","type","onDoubleClick","MapComponent","tasksForTodolist","todolistID","removeTask","map","t","id","isDone","changeTaskStatus","checked","editTaskHandler","Todolist","changeFilter","setTodolists","todolists","el","filter","tasks","editTodolist","Button","variant","taskID","editTask","App","todolistID1","v1","todolistID2","setTasks","newTask","changeStatus","taskId","removeTodolist","newID","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.46b93b5f.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\n\r\n\r\n\r\ntype AddItemFormPropsType = {\r\n    callBack: (title: string) => void\r\n}\r\n\r\nconst AddItemForm = (props: AddItemFormPropsType) => {\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const addTask = () => {\r\n        let newTitle = title.trim()\r\n        if (newTitle !== \"\") {\r\n            props.callBack(newTitle);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null);\r\n        if (e.key === \"Enter\") {\r\n            addTask();\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <input value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   className={error ? \"error\" : \"\"}\r\n            />\r\n            <button onClick={addTask}>+</button>\r\n            {error && <div className=\"error-message\">{error}</div>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AddItemForm;","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    callBack: (newTitle: string) => void\r\n}\r\n\r\nconst EditableSpan = (props: EditableSpanPropsType) => {\r\n    let [newTitle, setNewTitle] = useState(props.title)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewTitle(e.currentTarget.value)\r\n    }\r\n\r\n\r\n    const addTask = () => {\r\n            props.callBack(newTitle);\r\n    }\r\n\r\n    const [edit, setEdit] = useState(false)\r\n    const EditTrueHandler = () => {\r\n        setEdit(!edit)\r\n        addTask()\r\n    }\r\n    return (\r\n        edit\r\n            ? <input\r\n                onBlur={EditTrueHandler} onChange={onChangeHandler} autoFocus type=\"text\" value={newTitle}/>\r\n            : <span onDoubleClick={EditTrueHandler}>{props.title}</span>\r\n    );\r\n};\r\n\r\nexport default EditableSpan;","import React, {ChangeEvent} from 'react';\r\nimport {TaskType} from \"../Todolist\"\r\nimport EditableSpan from \"./EditableSpan\";\r\n\r\n\r\ntype PropsType = {\r\n    tasksForTodolist: TaskType[]\r\n    todolistID: string\r\n    removeTask: (todolistID: string, taskId: string) => void\r\n    changeTaskStatus: (todolistID: string, taskId: string, isDone: boolean) => void\r\n    editTaskHandler:  (taskID: string, newTitle: string) => void\r\n}\r\n\r\n\r\nexport const MapComponent = ({tasksForTodolist, todolistID, removeTask, ...props}: PropsType) => {\r\n    return (\r\n        <div>\r\n            <ul>\r\n                {\r\n                    tasksForTodolist.map(t => {\r\n                        const onClickHandler = () => removeTask(todolistID, t.id)\r\n                        const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                            props.changeTaskStatus(todolistID, t.id, e.currentTarget.checked);\r\n                        }\r\n\r\n                        return <li key={t.id} className={t.isDone ? \"is-done\" : \"\"}>\r\n                            <input type=\"checkbox\"\r\n                                   onChange={onChangeHandler}\r\n                                   checked={t.isDone}\r\n                            />\r\n                            <EditableSpan title={t.title}\r\n                                          callBack={(newTitle) =>props.editTaskHandler(t.id, newTitle)}/>\r\n                            <button onClick={onClickHandler}>x</button>\r\n                        </li>\r\n                    })\r\n                }\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {FilterValuesType, TodolistsType} from './App';\r\nimport AddItemForm from \"./components/AddItemForm\";\r\nimport {MapComponent} from \"./components/MapComponent\";\r\nimport EditableSpan from \"./components/EditableSpan\";\r\nimport {Button} from \"@mui/material\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\nexport type PropsType = {\r\n    title: string\r\n    todolistID: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (todolistID: string, taskId: string) => void\r\n    //changeFilter: (todolistID: string, value: FilterValuesType) => void\r\n    addTask: (todolistID: string, title: string) => void\r\n    changeTaskStatus: (todolistID: string, taskId: string, isDone: boolean) => void\r\n    filter: FilterValuesType\r\n    setTodolists: (todolists: Array<TodolistsType>) => void\r\n    todolists: Array<TodolistsType>\r\n    removeTodolist: (todolistID: string) => void\r\n    editTodolist: (todolistID: string, newTitle: string) => void\r\n    editTask: (todolistID:string, taskID: string,newTitle: string) => void\r\n}\r\n\r\nexport function Todolist(props: PropsType) {\r\n\r\n    function changeFilter(todolistID: string, value: FilterValuesType) {\r\n        props.setTodolists(props.todolists.map(el => el.id === todolistID ? {...el, filter: value} : el))\r\n    }\r\n\r\n    let tasksForTodolist = props.tasks;\r\n    if (props.filter === \"active\") {\r\n        tasksForTodolist = props.tasks.filter(t => t.isDone === false);\r\n    }\r\n    if (props.filter === \"completed\") {\r\n        tasksForTodolist = props.tasks.filter(t => t.isDone === true);\r\n    }\r\n\r\n    const onAllClickHandler = () => changeFilter(props.todolistID, \"all\");\r\n    const onActiveClickHandler = () => changeFilter(props.todolistID, \"active\");\r\n    const onCompletedClickHandler = () => changeFilter(props.todolistID, \"completed\");\r\n\r\n    const removeTodolistHandler = () => {\r\n        props.removeTodolist(props.todolistID)\r\n    }\r\n\r\n    const addTaskHandler = (title: string) => {\r\n        props.addTask(props.todolistID,title)\r\n    }\r\n\r\n    const editTodolistHandler = (newTitle: string) => {\r\n        props.editTodolist(props.todolistID,newTitle)\r\n    }\r\n    const editTaskHandler = (taskID: string, newTitle: string) => {\r\n        props.editTask(props.todolistID,taskID,newTitle)\r\n    }\r\n\r\n    return <div>\r\n        <h3>\r\n            {/*{props.title}*/}\r\n            <EditableSpan title={props.title} callBack={editTodolistHandler} />\r\n            <Button variant=\"contained\">Contained</Button>\r\n            {/*<button onClick={removeTodolistHandler}>X</button>*/}\r\n        </h3>\r\n        <AddItemForm callBack={addTaskHandler}/>\r\n        <MapComponent\r\n            tasksForTodolist={tasksForTodolist}\r\n            removeTask={props.removeTask}\r\n            changeTaskStatus={props.changeTaskStatus}\r\n            todolistID={props.todolistID}\r\n            editTaskHandler={editTaskHandler}\r\n        />\r\n        <div>\r\n            <button className={props.filter === 'all' ? \"active-filter\" : \"\"}\r\n                    onClick={onAllClickHandler}>All\r\n            </button>\r\n            <button className={props.filter === 'active' ? \"active-filter\" : \"\"}\r\n                    onClick={onActiveClickHandler}>Active\r\n            </button>\r\n            <button className={props.filter === 'completed' ? \"active-filter\" : \"\"}\r\n                    onClick={onCompletedClickHandler}>Completed\r\n            </button>\r\n        </div>\r\n    </div>\r\n}\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {Todolist} from './Todolist';\r\nimport {v1} from 'uuid';\r\nimport AddItemForm from \"./components/AddItemForm\";\r\n\r\nexport type TodolistsType = {\r\n    id: string,\r\n    title: string,\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\n\r\nfunction App() {\r\n\r\n    let todolistID1 = v1();\r\n    let todolistID2 = v1();\r\n\r\n    let [todolists, setTodolists] = useState<Array<TodolistsType>>([\r\n        {id: todolistID1, title: 'What to learn', filter: 'all'},\r\n        {id: todolistID2, title: 'What to buy', filter: 'all'},\r\n    ])\r\n\r\n    let [tasks, setTasks] = useState({\r\n        [todolistID1]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true},\r\n            {id: v1(), title: \"ReactJS\", isDone: false},\r\n            {id: v1(), title: \"Rest API\", isDone: false},\r\n            {id: v1(), title: \"GraphQL\", isDone: false},\r\n        ],\r\n        [todolistID2]: [\r\n            {id: v1(), title: \"HTML&CSS2\", isDone: true},\r\n            {id: v1(), title: \"JS2\", isDone: true},\r\n            {id: v1(), title: \"ReactJS2\", isDone: false},\r\n            {id: v1(), title: \"Rest API2\", isDone: false},\r\n            {id: v1(), title: \"GraphQL2\", isDone: false},\r\n        ]\r\n    });\r\n    const editTodolist = (todolistID: string, newTitle: string) => {\r\n      setTodolists(todolists.map(el => el.id === todolistID ? {...el, title: newTitle}: el))\r\n    }\r\n\r\n    const editTask = (todolistID:string, taskID: string,newTitle: string) => {\r\n        setTasks({\r\n            ...tasks,\r\n            [todolistID]: tasks[todolistID].map(el => el.id === taskID ? {...el, title: newTitle} : el)\r\n        })\r\n    }\r\n\r\n    function removeTask(todolistID: string, id: string) {\r\n        setTasks({...tasks, [todolistID]: tasks[todolistID].filter(el => el.id !== id)})\r\n    }\r\n\r\n    function addTask(todolistID: string, title: string) {\r\n        let newTask = {id: v1(), title: title, isDone: false};\r\n        setTasks({...tasks, [todolistID]: [newTask, ...tasks[todolistID]]})\r\n    }\r\n\r\n    function changeStatus(todolistID: string, taskId: string, isDone: boolean) {\r\n        setTasks({...tasks, [todolistID]: tasks[todolistID].map(el => el.id === taskId ? {...el, isDone} : el)});\r\n    }\r\n\r\n    const removeTodolist = (todolistID: string) => {\r\n        setTodolists(todolists.filter(el => el.id !== todolistID))\r\n    }\r\n\r\n    const addTodolist = (newTitle: string) => {\r\n        const newID = v1()\r\n        let newTodolist: TodolistsType = {id: newID, title: newTitle, filter: 'all'};\r\n        setTodolists([newTodolist, ...todolists])\r\n        setTasks({...tasks, [newID]: []})\r\n\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AddItemForm callBack={addTodolist}/>\r\n            {\r\n                todolists.map((el) => {\r\n                    return (\r\n                        <Todolist\r\n                            key={el.id}\r\n                            todolistID={el.id}\r\n                            title={el.title}\r\n                            tasks={tasks[el.id]}\r\n                            removeTask={removeTask}\r\n                            //changeFilter={changeFilter}\r\n                            addTask={addTask}\r\n                            changeTaskStatus={changeStatus}\r\n                            filter={el.filter}\r\n                            setTodolists={setTodolists}\r\n                            todolists={todolists}\r\n                            removeTodolist={removeTodolist}\r\n                            editTodolist={editTodolist}\r\n                            editTask={editTask}\r\n                        />\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}